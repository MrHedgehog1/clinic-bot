package com.clinicbot.clinic_bot.service;

import com.clinicbot.clinic_bot.model.*;
import com.clinicbot.clinic_bot.model.User;
import com.clinicbot.clinic_bot.repository.*;
import jakarta.persistence.EntityNotFoundException;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.io.FileInputStream;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.TextStyle;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

import static java.awt.SystemColor.text;

// import static java.util.stream.Nodes.collect;

@Slf4j
@Component
public class ClinicTelegramBot extends TelegramWebhookBot {
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π

    private UserRepository userRepository;
    private ClinicRepository clinicRepository;
    private DoctorScheduleRepository doctorScheduleRepository;
    private AppointmentRepository appointmentRepository;

    @Value("${bot.token}")
    private String botToken;

    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.path}")
    private String botPath;

    public ClinicTelegramBot() {
        // –≠—Ç–æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã @Lazy
    }

    @Autowired
    public void setUserRepository(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Autowired
    public void setClinicRepository(ClinicRepository clinicRepository) {
        this.clinicRepository = clinicRepository;
    }

    @Autowired
    public void setDoctorScheduleRepository(DoctorScheduleRepository doctorScheduleRepository) {
        this.doctorScheduleRepository = doctorScheduleRepository;
    }

    @Autowired
    public void setAppointmentRepository(AppointmentRepository appointmentRepository) {
        this.appointmentRepository = appointmentRepository;
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        log.debug("Received update: {}", update);
        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏)
            if (update.hasCallbackQuery()) {
                return handleCallbackQuery(update.getCallbackQuery());
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update == null || !update.hasMessage()) {
                log.warn("Received empty update or update without message");
                return null;
            }
            if (!update.hasMessage()) return null;

            Long chatId = update.getMessage().getChatId();
            String text = update.getMessage().hasText() ? update.getMessage().getText() : "";
            if (!(text instanceof String)) {
                log.error("Received non-string text: {}", text);
                return sendMessage(update.getMessage().getChatId(), "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
            if (text.equals("/start")) {
                return handleStartCommand(update);
            }

            Optional<User> userOpt = userRepository.findByTelegramId(chatId);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (userOpt.isPresent() && userOpt.get().getRegistrationStep() != RegistrationStep.COMPLETED) {
                return handleRegistrationStep(userOpt.get(), text, update);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if (userOpt.isPresent() &&
                    (userOpt.get().getAdminState() == AdminState.WAITING_SCHEDULE_MONTH ||
                            userOpt.get().getAdminState() == AdminState.WAITING_SCHEDULE_FILE)) {
                return handleAdminState(userOpt.get(), update);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (userOpt.isPresent() && userOpt.get().getRegistrationStep() == RegistrationStep.COMPLETED) {
                return handlePostRegistration(userOpt.get(), text, update);
            }
        } catch (Exception e) {
            log.error("Error processing update", e);
            return createErrorMessage(update);
        }

        return null;
    }

    private BotApiMethod<?> createErrorMessage(Update update) {
        Long chatId = null;
        if (update.hasCallbackQuery()) {
            chatId = update.getCallbackQuery().getMessage().getChatId();
        } else if (update.hasMessage()) {
            chatId = update.getMessage().getChatId();
        }

        if (chatId != null) {
            return SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    .build();
        }
        return null;
    }

    private BotApiMethod<?> handleAdminState(User admin, Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            log.warn("Admin state handling requires text message");
            return null;
        }

        String text = update.getMessage().getText();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
        if (!(text instanceof String)) {
            log.error("Non-string command in admin state: {}", text);
            resetAdminState(admin);
            return sendMessage(admin.getTelegramId(), "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
        log.info("Handling admin state: {} for command: {}", admin.getAdminState(), text);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
        if (!(text instanceof String)) {
            log.error("Non-string command in admin state: {}", text);
            resetAdminState(admin);
            return sendMessage(admin.getTelegramId(), "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        List<String> mainMenuCommands = Arrays.asList(
                "–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É", "–ú–æ–∏ –∑–∞–ø–∏—Å–∏", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–∞—á–∞",
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏"
        );

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if ("üîô –ù–∞–∑–∞–¥".equals(text)) {
            resetAdminState(admin);
            return SendMessage.builder()
                    .chatId(admin.getTelegramId().toString())
                    .text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    .replyMarkup(createMainMenuKeyboard(admin))
                    .build();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        if ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            resetAdminState(admin);
            return SendMessage.builder()
                    .chatId(admin.getTelegramId().toString())
                    .text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    .replyMarkup(createMainMenuKeyboard(admin))
                    .build();
        }

        switch (admin.getAdminState()) {
            case WAITING_DOCTOR_PHONE:
                return assignDoctorRole(admin, update.getMessage().getText());
            case WAITING_SCHEDULE_MONTH:
                return handleScheduleMonthInput(admin, update.getMessage().getText());
            case WAITING_SCHEDULE_FILE:
                return handleScheduleUploadState(admin, update);
            default:
                resetAdminState(admin);
                return sendMessage(admin.getTelegramId(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
    }

    private void resetAdminState(User admin) {
        log.info("Resetting admin state for user: {}", admin.getId());
        admin.setAdminState(AdminState.IDLE);
        admin.setScheduleMonth(null);
        admin.setScheduleUploadState(null);
        userRepository.save(admin);
    }

    private BotApiMethod<?> handleStartCommand(Update update) {
        Message message = update.getMessage();
        if (message == null) {
            log.warn("Received update without message");
            return null;
        }

        Long chatId = update.getMessage().getChatId();
        String username = update.getMessage().getFrom().getUserName(); // –ø–æ–ª—É—á–∞–µ–º username

        Optional<User> userOpt = userRepository.findByTelegramId(chatId);
        SendMessage response = new SendMessage();
        response.setChatId(chatId.toString());

        if (userOpt.isEmpty()) {
            User newUser = new User();
            newUser.setTelegramId(chatId);
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ username
            if (username != null && !username.isBlank()) {
                newUser.setUsername(username);// —Å–æ—Ö—Ä–∞–Ω—è–µ–º username
            } else {
                log.warn("Username is null for chatId: {}", chatId);
            }
            newUser.setRegistrationStep(RegistrationStep.ENTER_PHONE);
            newUser.setStatus(UserStatus.PENDING);
            newUser.setRole(UserRole.PATIENT); // –∏—Å–ø–æ–ª—å–∑—É–µ–º enum
            userRepository.save(newUser);

            response.setText("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª:");
            response.setReplyMarkup(createPhoneRequestKeyboard());
        } else {
            User user = userOpt.get();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã
            user = userRepository.findById(user.getId()).orElse(user);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
            resetAppointmentState(user);
            resetAdminState(user);

            if (user.getRegistrationStep() == RegistrationStep.COMPLETED) {
                response.setText("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                response.setReplyMarkup(createMainMenuKeyboard(user));
            } else {
                // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                switch (user.getRegistrationStep()) {
                    case ENTER_PHONE:
                        response.setText("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª:");
                        response.setReplyMarkup(createPhoneRequestKeyboard());
                        break;
                    case ENTER_FULL_NAME:
                        response.setText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):");
                        break;
                }
            }
        }
        return response;
    }

    private BotApiMethod<?> handleRegistrationStep(User user, String text, Update update) {
        try {
            SendMessage response = new SendMessage();
            response.setChatId(user.getTelegramId().toString());

            switch (user.getRegistrationStep()) {
                case ENTER_PHONE:
                    if (update.getMessage() != null && update.getMessage().hasContact()) {
                        Contact contact = update.getMessage().getContact();
                        if (contact != null && contact.getPhoneNumber() != null) {
                            user.setPhone(contact.getPhoneNumber());
                            user.setRegistrationStep(RegistrationStep.ENTER_FULL_NAME);
                            response.setText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):");
                        } else {
                            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
                            response.setText("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                            response.setReplyMarkup(createPhoneRequestKeyboard());
                        }
                    } else {
                        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç
                        response.setText("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª:");
                        response.setReplyMarkup(createPhoneRequestKeyboard());
                    }
                    break;

                case ENTER_FULL_NAME:
                    if (text != null && !text.trim().isEmpty()) {
                        user.setFullName(text.trim());
                        user.setRegistrationStep(RegistrationStep.COMPLETED);
                        user.setStatus(UserStatus.ACTIVE);
                        response.setText("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                        response.setReplyMarkup(createMainMenuKeyboard(user));
                    } else {
                        response.setText("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):");
                    }
                    break;
            }

            userRepository.save(user);
            return response;
        } catch (Exception e) {
            log.error("Error in handleRegistrationStep for user: {}", user.getId(), e);
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    .build();
        }
    }

    private BotApiMethod<?> handlePostRegistration(User user, String text, Update update) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if ((user.getRole() == UserRole.ADMIN || user.getRole() == UserRole.ROOT) &&
                user.getAdminState() != null &&
                user.getAdminState() != AdminState.IDLE) {
            return handleAdminState(user, update);
        }

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
        if (user.getAppointmentState() != null) {
            return handleAppointmentState(user, text, update);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
        if (user.getAppointmentState() != null && !text.equals("–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É")) {
            resetAppointmentState(user);
        }


        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        switch (user.getRole()) {
            case ADMIN, ROOT -> {
                return handleAdminCommands(user, text);
            }
            case DOCTOR -> {
                return handleDoctorCommands(user, text);
            }
            default -> {
                return handlePatientCommands(user, text);
            }
        }
    }

    private BotApiMethod<?> assignDoctorRole(User admin, String phone) {
        try {
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            String normalizedPhone = normalizePhone(phone);

            if (normalizedPhone == null) {
                return sendMessage(admin.getTelegramId(), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX");
            }

            User doctor = userRepository.findByPhone(normalizedPhone);
            if (doctor == null) {
                return sendMessage(admin.getTelegramId(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º " + normalizedPhone + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            doctor.setRole(UserRole.DOCTOR);
            userRepository.save(doctor);

            resetAdminState(admin);
            return sendMessage(admin.getTelegramId(), "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + doctor.getFullName() + " –Ω–∞–∑–Ω–∞—á–µ–Ω –≤—Ä–∞—á–æ–º");
        } catch (Exception e) {
            log.error("Error assigning doctor role", e);
            return SendMessage.builder()
                    .chatId(admin.getTelegramId().toString())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤—Ä–∞—á–∞: " + e.getMessage())
                    .replyMarkup(createMainMenuKeyboard(admin))
                    .build();
        }

    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞
    private String normalizePhone(String phone) {
        if (phone == null) return null;

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –ø–ª—é—Å–∞
        String cleanPhone = phone.replaceAll("[^+0-9]", "");

        // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 89... –≤ +79...
        if (cleanPhone.startsWith("89") && cleanPhone.length() == 11) {
            return "+7" + cleanPhone.substring(1);
        }

        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (cleanPhone.startsWith("+7") && cleanPhone.length() == 12) {
            return cleanPhone;
        }

        // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        return null;
    }

    private ReplyKeyboardMarkup createBackButtonKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add("üîô –ù–∞–∑–∞–¥");
        row.add("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏");
        row.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        keyboard.setKeyboard(List.of(row));
        return keyboard;
    }

    private ReplyKeyboardMarkup createAdminBackKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add("üîô –ù–∞–∑–∞–¥");
        row.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        keyboard.setKeyboard(List.of(row));
        return keyboard;
    }

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    private BotApiMethod<?> handlePatientCommands(User user, String text) {
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã –∫—Ä–æ–º–µ –∑–∞–ø–∏—Å–∏
        if (!text.equals("–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É") && user.getAppointmentState() != null) {
            resetAppointmentState(user);
        }

        switch (text) {
            case "–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É":
                return startAppointmentProcess(user);
            case "–ú–æ–∏ –∑–∞–ø–∏—Å–∏":
                return showUserAppointments(user);
            case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
                return showUserProfile(user);
            default:
                return sendMessage(user.getTelegramId(), "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:");
        }
    }

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Ä–∞—á–µ–π
    private BotApiMethod<?> handleDoctorCommands(User user, String text) {
        switch (text) {
            case "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                return showDoctorSchedule(user);
            case "–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":
                return handleDoctorSpecializationSelection(user);
            case "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã":
                return showDoctorPatients(user);
            case "–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
                return showTodaysAppointments(user);
            case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
                return showUserProfile(user);
            default:
                return handlePatientCommands(user, text); // –î–æ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        }
    }

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    private BotApiMethod<?> handleAdminCommands(User user, String text) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ç–µ–∫—Å—Ç–∞
        if (!(text instanceof String)) {
            log.error("Non-string command in admin commands: {}", text);
            return sendMessage(user.getTelegramId(), "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }

        resetAdminState(user);

        switch (text) {
            case "–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–∞—á–∞":
                return startAssignDoctorProcess(user);
            case "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                return startScheduleUploadProcess(user);
            case "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏":
                return manageClinics(user);
            case "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏":
                return manageDoctors(user);
            case "/add_test_data":
                return addTestData(user);
            case "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
                return showUserProfile(user);
            default:
                return handleDoctorCommands(user, text); // –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ä–∞—á–∞
        }
    }

    private BotApiMethod<?> addTestData(User admin) {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–ª–∏–Ω–∏–∫–∏
        Clinic clinic = new Clinic();
        clinic.setName("–¢–µ—Å—Ç–æ–≤–∞—è –∫–ª–∏–Ω–∏–∫–∞");
        clinic.setAddress("—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1");
        clinicRepository.save(clinic);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞
        User doctor = new User();
        doctor.setFullName("–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á");
        doctor.setRole(UserRole.DOCTOR);
        doctor.setSpecialization("–¢–µ—Ä–∞–ø–µ–≤—Ç");
        doctor.setStatus(UserStatus.ACTIVE);
        doctor.getClinics().add(clinic);
        userRepository.save(doctor);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        DoctorSchedule schedule = new DoctorSchedule();
        schedule.setDoctor(doctor);
        schedule.setClinic(clinic);
        schedule.setDate(LocalDate.now().plusDays(1));
        schedule.setStartTime(LocalTime.of(9, 0));
        schedule.setEndTime(LocalTime.of(12, 0));
        schedule.setSlotDuration(30);
        doctorScheduleRepository.save(schedule);

        return sendMessage(admin.getTelegramId(), "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
    }

    private BotApiMethod<?> startAssignDoctorProcess(User admin) {
        try {
            admin.setAdminState(AdminState.WAITING_DOCTOR_PHONE);
            userRepository.save(admin);
            return SendMessage.builder()
                    .chatId(admin.getTelegramId().toString())
                    .text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä–∞—á–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX):")
                    .replyMarkup(createAdminBackKeyboard())
                    .build();
        } catch (Exception e) {
            log.error("Error setting admin state", e);
            return SendMessage.builder()
                    .chatId(admin.getTelegramId().toString())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    .build();
        }
    }

    // === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º ===

    private BotApiMethod<?> startAppointmentProcess(User user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∏–Ω–∏–∫
        List<Clinic> clinics = clinicRepository.findAll();
        if (clinics.isEmpty()) {
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫.\n\n"
                            + "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    .build();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–∞—á–µ–π
        List<User> doctors = userRepository.findByRole(UserRole.DOCTOR);
        if (doctors.isEmpty()) {
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ä–∞—á–µ–π.\n\n"
                            + "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–µ–π –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
                    .build();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        long availableSlots = doctorScheduleRepository.countByDateBetween(
                LocalDate.now(),
                LocalDate.now().plusMonths(1)
        );

        if (availableSlots == 0) {
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ö†Ô∏è –ù–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n\n" +
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    .build();
        }

        user.setAppointmentState(AppointmentState.SELECT_CLINIC);
        userRepository.save(user);

        return createSelectionMenu(
                user.getTelegramId(),
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É:",
                clinics.stream().map(Clinic::getName).collect(Collectors.toList())
        );
    }

    private BotApiMethod<?> handleAppointmentState(User user, String text, Update update) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
                resetAppointmentState(user);
                return SendMessage.builder()
                        .chatId(user.getTelegramId().toString())
                        .text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        .replyMarkup(createMainMenuKeyboard(user))
                        .build();
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            switch (user.getAppointmentState()) {
                case SELECT_CLINIC:
                    return handleClinicSelection(user, text);
                case MANAGE_CLINICS:
                    return handleClinicManagement(user, text);
                case SELECT_SPECIALIZATION:
                    return handleSpecializationSelection(user, text);
                case SELECT_DOCTOR:
                    return handleDoctorSelection(user, text);
                case SELECT_DAY:
                    return handleDaySelection(user, text);
                case SELECT_TIME:
                    return handleTimeSelection(user, text);
                case ENTER_COMPLAINTS:
                    return handleComplaintsInput(user, text);
                case CONFIRM_APPOINTMENT:
                    return handleAppointmentConfirmation(user, text);
                case MANAGE_DOCTORS:
                    return handleDoctorManagement(user, text);
                case ADD_DOCTOR:
                    return handleAddDoctor(user, text);
                case EDIT_DOCTOR:
                    return handleEditDoctor(user, text);
                case DELETE_DOCTOR:
                    return handleDeleteDoctor(user, text);
                case EDIT_DOCTOR_FULLNAME:
                    return handleEditDoctorFullName(user, text);
                case EDIT_DOCTOR_SPECIALIZATION:
                    return handleEditDoctorSpecialization(user, text);
                case EDIT_DOCTOR_CLINICS:
                    return handleEditDoctorClinics(user, text);
                default:
                    resetAppointmentState(user);
                    return SendMessage.builder()
                            .chatId(user.getTelegramId().toString())
                            .text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                            .replyMarkup(createMainMenuKeyboard(user))
                            .build();
            }
        } catch (Exception e) {
            log.error("Error in appointment process", e);
            resetAppointmentState(user);
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                    .replyMarkup(createMainMenuKeyboard(user)) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    .build();
        }
    }

    private BotApiMethod<?> handleClinicSelection(User user, String clinicName) {
        try {
            Optional<Clinic> clinicOpt = clinicRepository.findByName(clinicName);
            if (clinicOpt.isEmpty()) {
                return sendMessage(user.getTelegramId(), "–ö–ª–∏–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:");
            }

            user.setSelectedClinicId(clinicOpt.get().getId());
            user.setAppointmentState(AppointmentState.SELECT_SPECIALIZATION);
            userRepository.save(user);

            // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∫–ª–∏–Ω–∏–∫–µ
            List<String> allSpecializations = userRepository.findDistinctSpecializationsByClinicId(user.getSelectedClinicId());

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –°–û –°–í–û–ë–û–î–ù–´–ú–ò –°–õ–û–¢–ê–ú–ò
            List<String> availableSpecializations = userRepository.findSpecializationsWithAvailableSlots(
                    user.getSelectedClinicId(),
                    LocalDate.now(),
                    LocalDate.now().plusMonths(1)
            );

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–µ—Ç–∫–∞–º–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            List<String> menuOptions = new ArrayList<>();
            for (String spec : allSpecializations) {
                if (availableSpecializations.contains(spec)) {
                    menuOptions.add(spec);
                } else {
                    menuOptions.add(spec + " (–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤)");
                }
            }

            return createSelectionMenu(
                    user.getTelegramId(),
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞:",
                    menuOptions
            );
        } catch (Exception e) {
            log.error("Error in clinic selection for user: {}", user.getId(), e);
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∏–Ω–∏–∫–∏: " + e.getMessage())
                    .build();
        }

    }

    private BotApiMethod<?> handleSpecializationSelection(User user, String specialization) {
        user.setSelectedSpecialization(specialization);
        user.setAppointmentState(AppointmentState.SELECT_DOCTOR);
        userRepository.save(user);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–µ–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        List<User> doctors = userRepository.findDoctorsWithAvailableSlots(
                user.getSelectedClinicId(),
                specialization,
                LocalDate.now(),
                LocalDate.now().plusMonths(1)
        );

        if (doctors.isEmpty()) {
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ö†Ô∏è –£ –≤—Ä–∞—á–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ \"" + specialization + "\" –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n" +
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.")
                    .replyMarkup(createBackButtonKeyboard())
                    .build();
        }

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—Ä–∞—á–µ–π
        Map<Long, User> uniqueDoctors = new LinkedHashMap<>();
        for (User doctor : doctors) {
            uniqueDoctors.putIfAbsent(doctor.getId(), doctor);
        }
        List<User> uniqueDoctorsList = new ArrayList<>(uniqueDoctors.values());

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        List<String> doctorOptions = new ArrayList<>();
        StringBuilder message = new StringBuilder("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:\n\n");

        for (User doctor : uniqueDoctorsList) {
            long freeSlots = calculateFreeSlots(doctor);
            doctorOptions.add(doctor.getFullName()); // –¢–æ–ª—å–∫–æ –∏–º—è –±–µ–∑ —ç–º–æ–¥–∑–∏
            message.append("üë®‚Äç‚öïÔ∏è ")
                    .append(doctor.getFullName())
                    .append(" - —Å–≤–æ–±–æ–¥–Ω–æ: ")
                    .append(freeSlots)
                    .append("\n");
        }

        return SendMessage.builder()
                .chatId(user.getTelegramId().toString())
                .text(message.toString())
                .replyMarkup(createKeyboard(doctorOptions))
                .build();
    }

    private long calculateFreeSlots(User doctor) {
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = startDate.plusMonths(1);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –≤—Ä–∞—á–∞
        List<DoctorSchedule> allSlots = doctorScheduleRepository.findByDoctorIdAndDateBetween(
                doctor.getId(),
                startDate,
                endDate
        );

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        List<Appointment> bookedAppointments = appointmentRepository.findByDoctorIdAndDateTimeBetween(
                doctor.getId(),
                startDate.atStartOfDay(),
                endDate.atTime(LocalTime.MAX)
        );

        return allSlots.stream()
                .filter(slot -> isSlotAvailable(slot, bookedAppointments))
                .count();
    }

    private boolean isSlotAvailable(DoctorSchedule slot, List<Appointment> appointments) {
        return appointments.stream().noneMatch(appt ->
                appt.getDateTime().toLocalDate().equals(slot.getDate()) &&
                        appt.getDateTime().toLocalTime().equals(slot.getStartTime())
        );
    }

    private BotApiMethod<?> handleDoctorSelection(User user, String doctorName) {
        try {
            // –¢–µ–ø–µ—Ä—å –º—ã –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç–æ–µ –∏–º—è –≤—Ä–∞—á–∞
            log.info("Selected doctor name: {}", doctorName);

            // –ò—â–µ–º –≤—Ä–∞—á–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –∫–ª–∏–Ω–∏–∫–µ
            Optional<User> doctorOpt = userRepository.findByFullNameAndClinicId(
                    doctorName,
                    user.getSelectedClinicId()
            );

            if (doctorOpt.isEmpty()) {
                log.warn("Doctor not found: {} for clinic: {}", doctorName, user.getSelectedClinicId());
                return sendMessage(user.getTelegramId(), "–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:");
            }

            user.setSelectedDoctor(doctorOpt.get());
            user.setAppointmentState(AppointmentState.SELECT_DAY);
            userRepository.save(user);

            return showCalendar(user);
        } catch (Exception e) {
            log.error("Error in doctor selection", e);
            return sendMessage(user.getTelegramId(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    private BotApiMethod<?> showCalendar(User user) {
        YearMonth currentMonth = YearMonth.now();
        LocalDate startDate = currentMonth.atDay(1);
        LocalDate endDate = currentMonth.atEndOfMonth();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –≤ –º–µ—Å—è—Ü–µ
        long slotsThisMonth = doctorScheduleRepository.countByDoctorIdAndDateBetween(
                user.getSelectedDoctor().getId(),
                startDate,
                endDate
        );

        if (slotsThisMonth == 0) {
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ö†Ô∏è –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.\n" +
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –≤—Ä–∞—á–∞.")
                    .replyMarkup(createBackButtonKeyboard())
                    .build();
        }

        LocalDate firstDay = currentMonth.atDay(1);
        int daysInMonth = currentMonth.lengthOfMonth();
        int firstDayOfWeek = firstDay.getDayOfWeek().getValue(); // 1-–ø–Ω, 7-–≤—Å

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
        KeyboardRow monthRow = new KeyboardRow();
        monthRow.add(currentMonth.getMonth().getDisplayName(TextStyle.FULL_STANDALONE, new Locale("ru"))
                + " " + currentMonth.getYear());
        rows.add(monthRow);

        // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        KeyboardRow weekDaysRow = new KeyboardRow();
        for (DayOfWeek dayOfWeek : DayOfWeek.values()) {
            weekDaysRow.add(dayOfWeek.getDisplayName(TextStyle.SHORT_STANDALONE, new Locale("ru")));
        }
        rows.add(weekDaysRow);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        KeyboardRow currentRow = new KeyboardRow();
        for (int i = 1; i < firstDayOfWeek; i++) {
            currentRow.add(" ");
        }

        for (int day = 1; day <= daysInMonth; day++) {
            LocalDate date = currentMonth.atDay(day);
            boolean hasSlots = hasAvailableSlots(user.getSelectedDoctor().getId(), date);

            String buttonText = hasSlots ? "üü¢ " + day : "üî¥ " + day;
            currentRow.add(buttonText);

            if (date.getDayOfWeek() == DayOfWeek.SUNDAY) {
                rows.add(currentRow);
                currentRow = new KeyboardRow();
            }
        }

        if (!currentRow.isEmpty()) {
            rows.add(currentRow);
        }

        keyboard.setKeyboard(rows);

        return SendMessage.builder()
                .chatId(user.getTelegramId().toString())
                .text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∑–∞–ø–∏—Å–∏ (–∑–µ–ª–µ–Ω—ã–º –æ—Ç–º–µ—á–µ–Ω—ã –¥–Ω–∏ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏):")
                .replyMarkup(keyboard)
                .build();
    }

    private boolean hasAvailableSlots(Long doctorId, LocalDate date) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        List<DoctorSchedule> slots = doctorScheduleRepository.findByDoctorIdAndDate(doctorId, date);
        if (slots.isEmpty()) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
        List<Appointment> appointments = appointmentRepository.findByDoctorIdAndDate(doctorId, date);

        return slots.stream().anyMatch(slot ->
                appointments.stream().noneMatch(appt ->
                        appt.getDateTime().toLocalTime().equals(slot.getStartTime())
                )
        );
    }

    private BotApiMethod<?> handleDaySelection(User user, String dayString) {
        try {
            int day = Integer.parseInt(dayString.replaceAll("[^0-9]", ""));
            YearMonth currentMonth = YearMonth.now();
            LocalDate selectedDate = currentMonth.atDay(day);

            if (!hasAvailableSlots(user.getSelectedDoctor().getId(), selectedDate)) {
                return sendMessage(user.getTelegramId(), "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.");
            }

            user.setSelectedDate(selectedDate);
            user.setAppointmentState(AppointmentState.SELECT_TIME);
            userRepository.save(user);

            return showAvailableTimes(user);
        } catch (Exception e) {
            return sendMessage(user.getTelegramId(), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.");
        }
    }

    private BotApiMethod<?> showAvailableTimes(User user) {
        List<DoctorSchedule> slots = doctorScheduleRepository.findByDoctorIdAndDate(
                user.getSelectedDoctor().getId(),
                user.getSelectedDate()
        );

        List<Appointment> appointments = appointmentRepository.findByDoctorIdAndDate(
                user.getSelectedDoctor().getId(),
                user.getSelectedDate()
        );

        List<String> timeOptions = slots.stream()
                .filter(slot -> appointments.stream().noneMatch(appt ->
                        appt.getDateTime().toLocalTime().equals(slot.getStartTime())))
                .sorted(Comparator.comparing(DoctorSchedule::getStartTime))
                .map(slot -> slot.getStartTime().format(DateTimeFormatter.ofPattern("HH:mm")) + ", —Å–≤–æ–±–æ–¥–Ω–æ")
                .collect(Collectors.toList());

        if (timeOptions.isEmpty()) {
            return sendMessage(user.getTelegramId(), "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        timeOptions.add("‚óÄ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é");

        return SendMessage.builder()
                .chatId(user.getTelegramId().toString())
                .text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:")
                .replyMarkup(createKeyboard(timeOptions))
                .build();
    }

    private BotApiMethod<?> handleTimeSelection(User user, String timeString) {
        if ("‚óÄ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é".equals(timeString)) {
            user.setAppointmentState(AppointmentState.SELECT_DAY);
            userRepository.save(user);
            return showCalendar(user);
        }

        try {
            String timePart = timeString.split(",")[0].trim();
            LocalTime time = LocalTime.parse(timePart, DateTimeFormatter.ofPattern("HH:mm"));

            user.setSelectedTime(time);
            user.setAppointmentState(AppointmentState.ENTER_COMPLAINTS);
            userRepository.save(user);

            return sendMessage(user.getTelegramId(), "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ –∂–∞–ª–æ–±—ã (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):");
        } catch (Exception e) {
            return sendMessage(user.getTelegramId(), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞.");
        }
    }

    private BotApiMethod<?> handleComplaintsInput(User user, String text) {
        if (!"‚óÄ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é".equals(text)) {
            user.setTemporaryComplaints(text);
        }

        user.setAppointmentState(AppointmentState.CONFIRM_APPOINTMENT);
        userRepository.save(user);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("d MMMM", new Locale("ru"));
        String formattedDate = user.getSelectedDate().format(dateFormatter);
        String formattedTime = user.getSelectedTime().format(DateTimeFormatter.ofPattern("HH:mm"));

        String confirmationMessage = "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ " + formattedDate + " " + formattedTime;

        if (user.getTemporaryComplaints() != null && !user.getTemporaryComplaints().isEmpty()) {
            confirmationMessage += "\n\n–í–∞—à–∏ –∂–∞–ª–æ–±—ã:\n" + user.getTemporaryComplaints();
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è");
        row.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å");

        keyboard.setKeyboard(List.of(row));

        return SendMessage.builder()
                .chatId(user.getTelegramId().toString())
                .text(confirmationMessage)
                .replyMarkup(keyboard)
                .build();
    }

    private BotApiMethod<?> handleAppointmentConfirmation(User user, String confirmation) {
        if ("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è".equals(confirmation)) {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            Appointment appointment = new Appointment();
            appointment.setPatient(user);
            appointment.setDoctor(user.getSelectedDoctor());
            appointment.setClinic(clinicRepository.findById(user.getSelectedClinicId()).orElse(null));
            appointment.setDateTime(LocalDateTime.of(user.getSelectedDate(), user.getSelectedTime()));
            appointment.setComplaints(user.getTemporaryComplaints());

            appointmentRepository.save(appointment);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            resetAppointmentState(user);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMMM HH:mm", new Locale("ru"));
            String formattedDateTime = appointment.getDateTime().format(formatter);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ " + formattedDateTime + "!")
                    .replyMarkup(createMainMenuKeyboard(user)) // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    .build();
        }  else {
            // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
            resetAppointmentState(user);
            return SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    .replyMarkup(createMainMenuKeyboard(user)) // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    .build();
        }
    }

    private void resetAppointmentState(User user) {
        user.setAppointmentState(null);
        user.setSelectedClinicId(null);
        user.setSelectedSpecialization(null);
        user.setSelectedDoctor(null);
        user.setSelectedDate(null);
        user.setSelectedTime(null);
        user.setTemporaryComplaints(null);
        userRepository.save(user);
    }

    // === –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===

    private BotApiMethod<?> startScheduleUploadProcess(User admin) {
        admin.setScheduleUploadState(ScheduleState.WAITING_MONTH);
        userRepository.save(admin);

        return sendMessage(admin.getTelegramId(),
                "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 06.2025):"
        );
    }

    private BotApiMethod<?> handleScheduleMonthInput(User admin, String monthYear) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM.yyyy");
            YearMonth yearMonth = YearMonth.parse(monthYear, formatter);

            admin.setScheduleMonth(yearMonth.atDay(1));
            admin.setScheduleUploadState(ScheduleState.WAITING_FILE);
            userRepository.save(admin);

            return sendMessage(admin.getTelegramId(),
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–∞—á–µ–π –Ω–∞ " +
                            yearMonth.getMonth().getDisplayName(TextStyle.FULL_STANDALONE, new Locale("ru")) + " " +
                            yearMonth.getYear());
        } catch (DateTimeParseException e) {
            return sendMessage(admin.getTelegramId(), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 06.2025):");
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
    private BotApiMethod<?> handleScheduleUploadState(User admin, Update update) {
        switch (admin.getScheduleUploadState()) {
            case WAITING_MONTH:
                return handleScheduleMonthInput(admin, update.getMessage().getText());
            case WAITING_FILE:
                return handleScheduleFileUpload(admin, update);
            default:
                admin.setScheduleUploadState(null);
                userRepository.save(admin);
                return sendMessage(admin.getTelegramId(), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    private BotApiMethod<?> handleScheduleFileUpload(User admin, Update update) {
        if (!update.getMessage().hasDocument()) {
            return sendMessage(admin.getTelegramId(), "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.");
        }

        Document document = update.getMessage().getDocument();
        String fileName = document.getFileName();

        if (fileName == null || !(fileName.endsWith(".xlsx") || fileName.endsWith(".xls"))) {
            return sendMessage(admin.getTelegramId(), "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)");
        }

        try {
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            java.io.File file = downloadFile(document.getFileId());

            // –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            List<DoctorSchedule> schedules = parseScheduleExcel(file, admin.getScheduleMonth());

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
            if (schedules.isEmpty()) {
                return sendMessage(admin.getTelegramId(),
                        "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            doctorScheduleRepository.saveAll(schedules);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            admin.setScheduleUploadState(null);
            admin.setScheduleMonth(null);
            userRepository.save(admin);

            return sendMessage(admin.getTelegramId(), "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ " + schedules.size() + " –∑–∞–ø–∏—Å–µ–π.");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", e);
            return sendMessage(admin.getTelegramId(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    private List<DoctorSchedule> parseScheduleExcel(File file, LocalDate scheduleMonth) throws Exception {
        List<DoctorSchedule> schedules = new ArrayList<>();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");

        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (rowIterator.hasNext()) rowIterator.next();

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                String doctorName = getCellStringValue(row.getCell(0));
                String clinicName = getCellStringValue(row.getCell(1));
                String dateStr = getCellStringValue(row.getCell(2));
                String startTimeStr = getCellStringValue(row.getCell(3));
                String endTimeStr = getCellStringValue(row.getCell(4));
                int slotDuration = (int) row.getCell(5).getNumericCellValue();

                // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                LocalDate date = LocalDate.parse(dateStr, dateFormatter);
                LocalTime startTime = LocalTime.parse(startTimeStr, timeFormatter);
                LocalTime endTime = LocalTime.parse(endTimeStr, timeFormatter);

                if (slotDuration < 15) {
                    throw new Exception("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ—Å—è—Ü—É
                if (!date.getMonth().equals(scheduleMonth.getMonth()) ||
                        date.getYear() != scheduleMonth.getYear()) {
                    throw new Exception("–î–∞—Ç–∞ " + date + " –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Å—è—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è " + scheduleMonth.getMonth());
                }

                // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞—á–∞ –∏ –∫–ª–∏–Ω–∏–∫—É
                Optional<User> doctorOpt = userRepository.findByFullName(doctorName);
                Optional<Clinic> clinicOpt = clinicRepository.findByName(clinicName);

                if (doctorOpt.isEmpty()) {
                    throw new Exception("–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω: " + doctorName);
                }
                if (clinicOpt.isEmpty()) {
                    throw new Exception("–ö–ª–∏–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + clinicName);
                }

                // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                LocalTime currentTime = startTime;
                while (!currentTime.plusMinutes(slotDuration).isAfter(endTime)) {
                    DoctorSchedule schedule = new DoctorSchedule();
                    schedule.setDoctor(doctorOpt.get());
                    schedule.setClinic(clinicOpt.get());
                    schedule.setDate(date);
                    schedule.setStartTime(currentTime);
                    schedule.setEndTime(currentTime.plusMinutes(slotDuration));
                    schedule.setSlotDuration(slotDuration);

                    schedules.add(schedule);
                    currentTime = currentTime.plusMinutes(slotDuration);
                }
            }
        }

        return schedules;
    }

    private String getCellStringValue(Cell cell) {
        if (cell == null) return "";
        switch (cell.getCellType()) {
            case STRING: return cell.getStringCellValue().trim();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toInstant()
                            .atZone(ZoneId.systemDefault())
                            .toLocalDate()
                            .format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
                } else {
                    return String.valueOf((int) cell.getNumericCellValue());
                }
            default: return "";
        }
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

    private ReplyKeyboardMarkup createMainMenuKeyboard(User user) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false); // –ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ

        List<KeyboardRow> rows = new ArrayList<>();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É");
        row1.add("–ú–æ–∏ –∑–∞–ø–∏—Å–∏");
        rows.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
        rows.add(row2);

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ä–∞—á–µ–π
        if (user.getRole() == UserRole.DOCTOR) {
            KeyboardRow doctorRow = new KeyboardRow();
            doctorRow.add("–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
            doctorRow.add("–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è");
            rows.add(doctorRow);
        }

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if (user.getRole() == UserRole.ADMIN || user.getRole() == UserRole.ROOT) {
            KeyboardRow adminRow1 = new KeyboardRow();
            adminRow1.add("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
            adminRow1.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–∞—á–∞");
            rows.add(adminRow1);

            KeyboardRow adminRow2 = new KeyboardRow();
            adminRow2.add("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏");
            adminRow2.add("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏");
            rows.add(adminRow2);
        }

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private BotApiMethod<?> showUserAppointments(User user) {
        List<Appointment> appointments = appointmentRepository.findByPatientIdAndDateTimeAfter(
                user.getId(),
                LocalDateTime.now().minusHours(1) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏
        );

        if (appointments.isEmpty()) {
            return sendMessage(user.getTelegramId(), "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π");
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        for (Appointment appointment : appointments) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMMM HH:mm", new Locale("ru"));
            String formattedDateTime = appointment.getDateTime().format(formatter);

            String messageText = String.format(
                    "‚û§ *%s*\nüë®‚Äç‚öïÔ∏è %s\nüè• %s\n\n",
                    formattedDateTime,
                    appointment.getDoctor().getFullName(),
                    appointment.getClinic().getName()
            );

            // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();

            InlineKeyboardButton cancelButton = new InlineKeyboardButton();
            cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å");
            cancelButton.setCallbackData("cancel_" + appointment.getId());
            row.add(cancelButton);

            rows.add(row);
            inlineKeyboard.setKeyboard(rows);

            SendMessage message = SendMessage.builder()
                    .chatId(user.getTelegramId().toString())
                    .text(messageText)
                    .parseMode("Markdown")
                    .replyMarkup(inlineKeyboard)
                    .build();

            try {
                execute(message);
            } catch (TelegramApiException e) {
                log.error("Error sending appointment message", e);
            }
        }

        return null;
    }

    private BotApiMethod<?> handleCallbackQuery(CallbackQuery callbackQuery) {
        try {
            if (callbackQuery == null || callbackQuery.getMessage() == null) {
                log.error("Invalid callback query: {}", callbackQuery);
                return null;
            }
            String callbackData = callbackQuery.getData();
            Long chatId = callbackQuery.getMessage().getChatId();
            Integer messageId = callbackQuery.getMessage().getMessageId();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
            if (callbackData.startsWith("cancel_")) {
                Long appointmentId = Long.parseLong(callbackData.substring(7));
                return cancelAppointment(chatId, messageId, appointmentId);
            }
            else if (callbackData.startsWith("confirm_cancel_")) {
                Long appointmentId = Long.parseLong(callbackData.substring(15));
                return confirmAppointmentCancellation(chatId, messageId, appointmentId);
            }
            else if (callbackData.startsWith("keep_")) {
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                return DeleteMessage.builder()
                        .chatId(chatId.toString())
                        .messageId(messageId)
                        .build();
            }

            return null;
        } catch (Exception e) {
            log.error("Error handling callback", e);
            return SendMessage.builder()
                    .chatId(callbackQuery.getMessage().getChatId().toString())
                    .text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                    .build();
        }
    }

    private BotApiMethod<?> cancelAppointment(Long chatId, Integer messageId, Long appointmentId) {
        try {
            Optional<Appointment> appointmentOpt = appointmentRepository.findById(appointmentId);
            if (appointmentOpt.isEmpty()) {
                return SendMessage.builder()
                        .chatId(chatId.toString())
                        .text("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        .build();
            }

            Appointment appointment = appointmentOpt.get();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            Optional<User> userOpt = userRepository.findByTelegramId(chatId);
            if (userOpt.isEmpty() || !appointment.getPatient().getId().equals(userOpt.get().getId())) {
                return SendMessage.builder()
                        .chatId(chatId.toString())
                        .text("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –∑–∞–ø–∏—Å—å")
                        .build();
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å (–Ω–µ –ø–æ–∑–∂–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞)
            // if (appointment.getDateTime().isBefore(LocalDateTime.now().plusHours(24))) {
            //    return SendMessage.builder()
            //            .chatId(chatId.toString())
            //            .text("‚ö†Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞")
            //            .build();
            // }

            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            List<InlineKeyboardButton> confirmRow = new ArrayList<>();
            InlineKeyboardButton confirmButton = new InlineKeyboardButton();
            confirmButton.setText("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å");
            confirmButton.setCallbackData("confirm_cancel_" + appointmentId);
            confirmRow.add(confirmButton);

            List<InlineKeyboardButton> cancelRow = new ArrayList<>();
            InlineKeyboardButton cancelButton = new InlineKeyboardButton();
            cancelButton.setText("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å");
            cancelButton.setCallbackData("keep_" + appointmentId);
            cancelRow.add(cancelButton);

            rows.add(confirmRow);
            rows.add(cancelRow);
            inlineKeyboard.setKeyboard(rows);

            return EditMessageText.builder()
                    .chatId(chatId.toString())
                    .messageId(messageId)
                    .text("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n" +
                            "–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
                    .replyMarkup(inlineKeyboard)
                    .build();

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            // appointmentRepository.delete(appointment);

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø–∏—Å—å—é
            // DeleteMessage deleteMessage = DeleteMessage.builder()
            //        .chatId(chatId.toString())
            //        .messageId(messageId)
            //        .build();

            // try {
            //    execute(deleteMessage);
            // } catch (TelegramApiException e) {
            //    log.error("Error deleting message", e);
            //}

            //return SendMessage.builder()
            //        .chatId(chatId.toString())
            //        .text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            //        .build();
        } catch (Exception e) {
            log.error("Error canceling appointment", e);
            return SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")
                    .build();
        }

    }

    private BotApiMethod<?> confirmAppointmentCancellation(Long chatId, Integer messageId, Long appointmentId) {
        try {
            Optional<Appointment> appointmentOpt = appointmentRepository.findById(appointmentId);
            if (appointmentOpt.isEmpty()) {
                return SendMessage.builder()
                        .chatId(chatId.toString())
                        .text("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        .build();
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
            Optional<User> userOpt = userRepository.findByTelegramId(chatId);
            if (userOpt.isEmpty() || !appointmentOpt.get().getPatient().getId().equals(userOpt.get().getId())) {
                return SendMessage.builder()
                        .chatId(chatId.toString())
                        .text("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –∑–∞–ø–∏—Å—å")
                        .build();
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            appointmentRepository.delete(appointmentOpt.get());

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            DeleteMessage deleteMessage = DeleteMessage.builder()
                    .chatId(chatId.toString())
                    .messageId(messageId)
                    .build();

            try {
                execute(deleteMessage);
            } catch (TelegramApiException e) {
                log.error("Error deleting message", e);
            }

            return SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    .build();
        } catch (Exception e) {
            log.error("Error confirming cancellation", e);
            return SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã")
                    .build();
        }
    }

    private BotApiMethod<?> showDoctorPatients(User doctor) {
        List<Appointment> appointments = appointmentRepository.findByDoctorId(doctor.getId());

        if (appointments.isEmpty()) {
            return sendMessage(doctor.getTelegramId(), "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
        }

        StringBuilder sb = new StringBuilder("–í–∞—à–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã:\n\n");
        for (Appointment appointment : appointments) {
            sb.append(String.format("‚û§ %s %s: %s\n",
                    appointment.getDateTime().toLocalDate(),
                    appointment.getDateTime().toLocalTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                    appointment.getPatient().getFullName()
            ));
        }

        return sendMessage(doctor.getTelegramId(), sb.toString());
    }

    private BotApiMethod<?> showTodaysAppointments(User doctor) {
        LocalDate today = LocalDate.now();
        List<Appointment> appointments = appointmentRepository.findByDoctorIdAndDate(
                doctor.getId(),
                today
        );

        if (appointments.isEmpty()) {
            return sendMessage(doctor.getTelegramId(), "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç");
        }

        StringBuilder sb = new StringBuilder("–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n");
        for (Appointment appointment : appointments) {
            sb.append(String.format("‚û§ %s: %s\n",
                    appointment.getDateTime().toLocalTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                    appointment.getPatient().getFullName()
            ));
        }

        return sendMessage(doctor.getTelegramId(), sb.toString());
    }

    private BotApiMethod<?> showDoctorSchedule(User doctor) {
        LocalDate startDate = LocalDate.now();
        LocalDate endDate = startDate.plusWeeks(2);

        List<DoctorSchedule> schedules = doctorScheduleRepository.findByDoctorIdAndDateBetween(
                doctor.getId(), startDate, endDate
        );

        if (schedules.isEmpty()) {
            return sendMessage(doctor.getTelegramId(), "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }

        Map<LocalDate, List<DoctorSchedule>> scheduleByDate = schedules.stream()
                .collect(Collectors.groupingBy(DoctorSchedule::getDate));

        StringBuilder sb = new StringBuilder("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n");
        for (LocalDate date = startDate; !date.isAfter(endDate); date = date.plusDays(1)) {
            if (scheduleByDate.containsKey(date)) {
                sb.append("üìÖ ").append(date.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))).append("\n");

                for (DoctorSchedule slot : scheduleByDate.get(date)) {
                    sb.append("‚è± ").append(slot.getStartTime()).append(" - ").append(slot.getEndTime()).append("\n");
                }

                sb.append("\n");
            }
        }

        return sendMessage(doctor.getTelegramId(), sb.toString());
    }

    private BotApiMethod<?> manageClinics(User admin) {
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏
        admin.setAppointmentState(AppointmentState.MANAGE_CLINICS);
        userRepository.save(admin);

        List<Clinic> clinics = clinicRepository.findAll();
        List<String> options = clinics.stream()
                .map(c -> c.getName() + " (ID: " + c.getId() + ")")
                .collect(Collectors.toList());

        options.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É");
        options.add("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É");
        options.add("üîô –ù–∞–∑–∞–¥");

        return createSelectionMenu(
                admin.getTelegramId(),
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏:",
                options
        );
    }
    private BotApiMethod<?> handleClinicManagement(User admin, String text) {
        if (text.equals("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É")) {
            admin.setAppointmentState(AppointmentState.MANAGE_CLINICS);
            userRepository.save(admin);
            return sendMessage(admin.getTelegramId(), "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–ª–∏–Ω–∏–∫–∏:");
        }
        // ... –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        return null;
    }

    private BotApiMethod<?> manageDoctors(User admin) {
        admin.setAppointmentState(AppointmentState.MANAGE_DOCTORS);
        userRepository.save(admin);

        List<User> doctors = userRepository.findByRole(UserRole.DOCTOR);
        List<String> options = doctors.stream()
                .map(User::getFullName) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –§–ò–û
                .collect(Collectors.toList());

        options.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞");
        options.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–∞—á–∞");
        options.add("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞");
        options.add("üîô –ù–∞–∑–∞–¥");

        return createSelectionMenu(
                admin.getTelegramId(),
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏:",
                options
        );
    }

    private BotApiMethod<?> handleDoctorManagement(User admin, String text) {
        if (text.equals("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞")) {
            admin.setAppointmentState(AppointmentState.ADD_DOCTOR);
            userRepository.save(admin);
            return sendMessage(admin.getTelegramId(), "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞:");
        }
        else if (text.equals("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–∞—á–∞")) {
            admin.setAppointmentState(AppointmentState.EDIT_DOCTOR);
            userRepository.save(admin);
            return showDoctorsForEditing(admin);
        }
        else if (text.equals("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞")) {
            admin.setAppointmentState(AppointmentState.DELETE_DOCTOR);
            userRepository.save(admin);
            return showDoctorsForDeletion(admin);
        }
        else if (text.equals("üîô –ù–∞–∑–∞–¥")) {
            resetAppointmentState(admin);
            return handleAdminCommands(admin, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏");
        }

        // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–∞—á–µ
        return sendMessage(admin.getTelegramId(), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–µ:\n" + text);
    }

    private BotApiMethod<?> handleAddDoctor(User admin, String text) {
        if (admin.getSelectedDoctor() == null) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤—Ä–∞—á–∞
            User newDoctor = new User();
            newDoctor.setFullName(text);
            newDoctor.setRole(UserRole.DOCTOR);
            admin.setSelectedDoctor(newDoctor);
            userRepository.save(admin);

            return createSelectionMenu(
                    admin.getTelegramId(),
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞:",
                    Arrays.asList("–¢–µ—Ä–∞–ø–µ–≤—Ç", "–•–∏—Ä—É—Ä–≥", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "–ù–µ–≤—Ä–æ–ª–æ–≥", "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", "–û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥", "–ü–µ–¥–∏–∞—Ç—Ä")
            );
        }
        else if (admin.getSelectedDoctor().getSpecialization() == null) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            admin.getSelectedDoctor().setSpecialization(text);
            userRepository.save(admin);

            List<Clinic> clinics = clinicRepository.findAll();
            return createSelectionMenu(
                    admin.getTelegramId(),
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫–∏ –¥–ª—è –≤—Ä–∞—á–∞:",
                    clinics.stream().map(Clinic::getName).collect(Collectors.toList())
            );
        }
        else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–Ω–∏–∫
            if (text.equals("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–∞—á–∞
                User doctor = admin.getSelectedDoctor();
                userRepository.save(doctor);

                resetAppointmentState(admin);
                return sendMessage(admin.getTelegramId(),
                        "‚úÖ –í—Ä–∞—á " + doctor.getFullName() + " –¥–æ–±–∞–≤–ª–µ–Ω!\n" +
                                "–ö–ª–∏–Ω–∏–∫–∏: " + doctor.getClinics().stream()
                                .map(Clinic::getName)
                                .collect(Collectors.joining(", "))
                );
            }
            else if (text.equals("‚óÄ –ù–∞–∑–∞–¥")) {
                // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                admin.getSelectedDoctor().setSpecialization(null);
                userRepository.save(admin);

                return createSelectionMenu(
                        admin.getTelegramId(),
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞:",
                        Arrays.asList("–¢–µ—Ä–∞–ø–µ–≤—Ç", "–•–∏—Ä—É—Ä–≥", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "–ù–µ–≤—Ä–æ–ª–æ–≥",
                                "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", "–û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥", "–ü–µ–¥–∏–∞—Ç—Ä")
                );
            }
            else {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∏
                Optional<Clinic> clinicOpt = clinicRepository.findByName(text);
                if (clinicOpt.isPresent()) {
                    Clinic clinic = clinicOpt.get();
                    User doctor = admin.getSelectedDoctor();

                    if (doctor.getClinics().contains(clinic)) {
                        doctor.getClinics().remove(clinic);
                    } else {
                        doctor.getClinics().add(clinic);
                    }

                    userRepository.save(admin);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫
                    List<String> clinicOptions = clinicRepository.findAll().stream()
                            .map(c -> (doctor.getClinics().contains(c) ? "‚úÖ " : "") + c.getName())
                            .collect(Collectors.toList());

                    clinicOptions.add("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å");
                    clinicOptions.add("‚óÄ –ù–∞–∑–∞–¥");

                    return createSelectionMenu(
                            admin.getTelegramId(),
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫–∏ –¥–ª—è –≤—Ä–∞—á–∞ (–æ—Ç–º–µ—á–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ):",
                            clinicOptions
                    );
                }
            }
        }
        return null;
    }

    private BotApiMethod<?> showDoctorsForEditing(User admin) {
        List<User> doctors = userRepository.findByRole(UserRole.DOCTOR);
        List<String> options = new ArrayList<>();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        StringBuilder message = new StringBuilder("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n");

        for (User doctor : doctors) {
            String clinics = doctor.getClinics().stream()
                    .map(Clinic::getName)
                    .collect(Collectors.joining(", "));

            message.append("üë®‚Äç‚öïÔ∏è ")
                    .append(doctor.getFullName())
                    .append(" (")
                    .append(doctor.getSpecialization())
                    .append(")\nüè• –ö–ª–∏–Ω–∏–∫–∏: ")
                    .append(clinics)
                    .append("\n\n");

            // –í –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –§–ò–û –≤—Ä–∞—á–∞
            options.add(doctor.getFullName());
        }

        options.add("üîô –ù–∞–∑–∞–¥");

        return SendMessage.builder()
                .chatId(admin.getTelegramId().toString())
                .text(message.toString())
                .replyMarkup(createKeyboard(options))
                .build();
    }

    private BotApiMethod<?> handleEditDoctor(User admin, String text) {
        if (text.equals("üîô –ù–∞–∑–∞–¥")) {
            return manageDoctors(admin);
        }

        // –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞
        if (admin.getSelectedDoctor() != null) {
            return handleEditDoctorAction(admin, text);
        }

        // –í—ã–±–æ—Ä –≤—Ä–∞—á–∞ –ø–æ –∏–º–µ–Ω–∏
        Optional<User> doctorOpt = userRepository.findByFullName(text);
        if (doctorOpt.isEmpty()) {
            return sendMessage(admin.getTelegramId(), "–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        admin.setSelectedDoctor(doctorOpt.get());
        userRepository.save(admin);
        return showEditOptions(admin);
    }

    private BotApiMethod<?> showEditOptions(User admin) {
        User doctor = admin.getSelectedDoctor();
        List<String> options = Arrays.asList(
                "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û",
                "‚öïÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é",
                "üè• –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏–Ω–∏–∫–∏",
                "üîô –ù–∞–∑–∞–¥"
        );

        String clinics = doctor.getClinics().stream()
                .map(Clinic::getName)
                .collect(Collectors.joining(", "));

        String message = "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞:\n\n" +
                "üë®‚Äç‚öïÔ∏è –§–ò–û: " + doctor.getFullName() + "\n" +
                "‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: " + doctor.getSpecialization() + "\n" +
                "üè• –ö–ª–∏–Ω–∏–∫–∏: " + clinics + "\n\n" +
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?";

        return SendMessage.builder()
                .chatId(admin.getTelegramId().toString())
                .text(message)
                .replyMarkup(createKeyboard(options))
                .build();
    }

    private BotApiMethod<?> handleEditDoctorAction(User admin, String action) {
        switch (action) {
            case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û":
                admin.setAppointmentState(AppointmentState.EDIT_DOCTOR_FULLNAME);
                userRepository.save(admin);
                return sendMessage(admin.getTelegramId(), "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –≤—Ä–∞—á–∞:");

            case "‚öïÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é":
                admin.setAppointmentState(AppointmentState.EDIT_DOCTOR_SPECIALIZATION);
                userRepository.save(admin);
                return createSelectionMenu(
                        admin.getTelegramId(),
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
                        Arrays.asList("–¢–µ—Ä–∞–ø–µ–≤—Ç", "–•–∏—Ä—É—Ä–≥", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "–ù–µ–≤—Ä–æ–ª–æ–≥")
                );

            case "üè• –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏–Ω–∏–∫–∏":
                admin.setAppointmentState(AppointmentState.EDIT_DOCTOR_CLINICS);
                userRepository.save(admin);
                return showClinicSelectionForDoctor(admin);

            case "üîô –ù–∞–∑–∞–¥":
                admin.setSelectedDoctor(null);
                userRepository.save(admin);
                return showDoctorsForEditing(admin);

            default:
                return sendMessage(admin.getTelegramId(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        }
    }

    private BotApiMethod<?> showClinicSelectionForDoctor(User admin) {
        try {
            User doctor = userRepository.findById(admin.getSelectedDoctor().getId()).orElse(null);
            if (doctor == null) {
                return sendMessage(admin.getTelegramId(), "‚ö†Ô∏è –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            List<Clinic> allClinics = clinicRepository.findAll();
            List<String> clinicOptions = new ArrayList<>();

            for (Clinic clinic : allClinics) {
                boolean isSelected = doctor.getClinics().contains(clinic);
                clinicOptions.add((isSelected ? "‚úÖ " : "") + clinic.getName());
            }

            clinicOptions.add("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å");
            clinicOptions.add("‚óÄ –ù–∞–∑–∞–¥");

            return createSelectionMenu(
                    admin.getTelegramId(),
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫–∏ –¥–ª—è –≤—Ä–∞—á–∞ (–æ—Ç–º–µ—á–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ):",
                    clinicOptions
            );
        } catch (Exception e) {
            log.error("Error loading doctor clinics", e);
            return sendMessage(admin.getTelegramId(), "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–Ω–∏–∫");
        }
    }


    private BotApiMethod<?> handleEditDoctorFullName(User admin, String newFullName) {
        User doctor = admin.getSelectedDoctor();
        doctor.setFullName(newFullName);
        userRepository.save(doctor);

        resetAppointmentState(admin);
        return SendMessage.builder()
                .chatId(admin.getTelegramId().toString())
                .text("‚úÖ –§–ò–û –≤—Ä–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: " + newFullName)
                .replyMarkup(createMainMenuKeyboard(admin))
                .build();
    }

    private BotApiMethod<?> handleEditDoctorSpecialization(User admin, String specialization) {
        User doctor = admin.getSelectedDoctor();
        doctor.setSpecialization(specialization);
        userRepository.save(doctor);

        resetAppointmentState(admin);
        return SendMessage.builder()
                .chatId(admin.getTelegramId().toString())
                .text("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: " + specialization)
                .replyMarkup(createMainMenuKeyboard(admin))
                .build();
    }

    private BotApiMethod<?> handleEditDoctorClinics(User admin, String clinicName) {
        if ("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å".equals(clinicName)) {
            userRepository.save(admin.getSelectedDoctor());
            resetAppointmentState(admin);
            return SendMessage.builder()
                    .chatId(admin.getTelegramId().toString())
                    .text("‚úÖ –ö–ª–∏–Ω–∏–∫–∏ –≤—Ä–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                    .replyMarkup(createMainMenuKeyboard(admin))
                    .build();
        } else if ("‚óÄ –ù–∞–∑–∞–¥".equals(clinicName)) {
            return showEditOptions(admin);
        }

        try {
            String pureClinicName = clinicName.replace("‚úÖ ", "").trim();
            Optional<Clinic> clinicOpt = clinicRepository.findByName(pureClinicName);

            if (clinicOpt.isEmpty()) {
                return sendMessage(admin.getTelegramId(), "–ö–ª–∏–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pureClinicName);
            }

            Clinic clinic = clinicOpt.get();
            User doctor = admin.getSelectedDoctor();

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫
            List<Clinic> updatedClinics = new ArrayList<>(doctor.getClinics());

            if (updatedClinics.contains(clinic)) {
                updatedClinics.remove(clinic);
            } else {
                updatedClinics.add(clinic);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫
            doctor.setClinics(updatedClinics);
            userRepository.save(doctor);

            return showClinicSelectionForDoctor(admin);
        } catch (Exception e) {
            log.error("Error updating doctor clinics", e);
            return sendMessage(admin.getTelegramId(), "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫");
        }
    }

    private BotApiMethod<?> showDoctorsForDeletion(User admin) {
        List<User> doctors = userRepository.findByRole(UserRole.DOCTOR);
        List<String> options = doctors.stream()
                .map(d -> d.getFullName() + " (" + d.getSpecialization() + ")")
                .collect(Collectors.toList());

        options.add("üîô –ù–∞–∑–∞–¥");

        return createSelectionMenu(
                admin.getTelegramId(),
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                options
        );
    }

    private BotApiMethod<?> handleDeleteDoctor(User admin, String text) {
        if (text.equals("üîô –ù–∞–∑–∞–¥")) {
            return manageDoctors(admin);
        }

        String doctorName = text.split("\\(")[0].trim();
        Optional<User> doctorOpt = userRepository.findByFullName(doctorName);

        if (doctorOpt.isEmpty()) {
            return sendMessage(admin.getTelegramId(), "–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        User doctor = doctorOpt.get();
        Long doctorId = doctor.getId();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        List<Appointment> futureAppointments = appointmentRepository.findByDoctorIdAndDateTimeAfter(
                doctorId,
                LocalDateTime.now()
        );

        if (!futureAppointments.isEmpty()) {
            return sendMessage(admin.getTelegramId(),
                    "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏!\n" +
                            "–£ –≤—Ä–∞—á–∞ –µ—Å—Ç—å " + futureAppointments.size() + " –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–∏–µ–º–æ–≤.");
        }

        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç - —É–¥–∞–ª—è–µ–º –≤—Ä–∞—á–∞
        userRepository.delete(doctor);
        resetAppointmentState(admin);
        return sendMessage(admin.getTelegramId(), "‚úÖ –í—Ä–∞—á " + doctorName + " —É–¥–∞–ª—ë–Ω");
    }

    private BotApiMethod<?> handleDoctorSpecializationSelection(User doctor) {
        List<String> specializations = Arrays.asList(
                "–¢–µ—Ä–∞–ø–µ–≤—Ç", "–•–∏—Ä—É—Ä–≥", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "–ù–µ–≤—Ä–æ–ª–æ–≥",
                "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", "–û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥", "–ü–µ–¥–∏–∞—Ç—Ä"
        );

        return createSelectionMenu(
                doctor.getTelegramId(),
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:",
                specializations
        );
    }

    private BotApiMethod<?> showUserProfile(User user) {
        StringBuilder sb = new StringBuilder();
        sb.append("üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n");
        sb.append("‚ñ∏ –§–ò–û: ").append(user.getFullName()).append("\n");
        sb.append("‚ñ∏ –¢–µ–ª–µ—Ñ–æ–Ω: ").append(user.getPhone()).append("\n");
        sb.append("‚ñ∏ –†–æ–ª—å: ").append(getRoleDisplay(user.getRole())).append("\n");

        if (user.getRole() == UserRole.DOCTOR) {
            sb.append("‚ñ∏ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ").append(
                    user.getSpecialization() != null ? user.getSpecialization() : "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            ).append("\n");
        }

        if (user.getRole() == UserRole.ADMIN || user.getRole() == UserRole.ROOT) {
            sb.append("‚ñ∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ").append(
                    user.getAdminState() != null ? user.getAdminState() : "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"
            ).append("\n");
        }

        return sendMessage(user.getTelegramId(), sb.toString());
    }

    private String getRoleDisplay(String role) {
        switch (role) {
            case "PATIENT": return "–ü–∞—Ü–∏–µ–Ω—Ç";
            case "DOCTOR": return "–í—Ä–∞—á";
            case "ADMIN": return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
            case "ROOT": return "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
            default: return role;
        }
    }

    private BotApiMethod<?> createSelectionMenu(Long chatId, String message, List<String> options) {
        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(message)
                .replyMarkup(createKeyboard(options))
                .build();
    }

    private ReplyKeyboardMarkup createKeyboard(List<String> options) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow currentRow = new KeyboardRow();

        for (String option : options) {
            if (currentRow.size() >= 2) { // –ú–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                rows.add(currentRow);
                currentRow = new KeyboardRow();
            }
            currentRow.add(option);
        }

        if (!currentRow.isEmpty()) {
            rows.add(currentRow);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add("üîô –ù–∞–∑–∞–¥");
        rows.add(backRow);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createPhoneRequestKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        KeyboardButton phoneButton = new KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä");
        phoneButton.setRequestContact(true);
        row.add(phoneButton);

        keyboard.setKeyboard(List.of(row));
        return keyboard;
    }

    private SendMessage sendMessage(Long chatId, String text) {
        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .build();
    }

    private SendMessage sendMessage(Long chatId, String text, ReplyKeyboardMarkup keyboard) {
        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .replyMarkup(keyboard)
                .build();
    }

    private String getRoleDisplay(UserRole role) {
        if (role == null) return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";
        switch (role) {
            case PATIENT: return "–ü–∞—Ü–∏–µ–Ω—Ç";
            case DOCTOR: return "–í—Ä–∞—á";
            case ADMIN: return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
            case ROOT: return "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
            default: return role.name();
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotPath() {
        return botPath;
    }
}